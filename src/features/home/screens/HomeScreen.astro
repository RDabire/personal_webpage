---
import { buttonVariants } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { type LanguageCode, useTranslations } from '@/i18n/ui';
import { formatDate } from '@/lib/utils';
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import { ArrowRight, BookOpen } from 'lucide-react';

type WritingPreview = {
  slug: string;
  title: string;
  description?: string;
  pubDate: Date;
  heroImage?: ImageMetadata;
  heroImageAlt?: string;
};

export type Props = {
  lang: LanguageCode;
  writingPreviews: Array<WritingPreview>;
};

const { lang, writingPreviews } = Astro.props;
const t = useTranslations(lang, 'homePage');

const heroLabel = t('heroLabel');
const heroHeadline = t('heroHeadline');
const heroSubheadline = t('heroSubheadline');
const heroSupporting = t('heroSupporting');
const aboutTitle = t('aboutTitle');
const aboutSummary = t('aboutSummary');
const writingTitle = t('writingTitle');
const writingSubtitle = t('writingSubtitle');
const writingReadMoreLabel = t('writingReadMoreLabel');
const writingEmptyState = t('writingEmptyState');
const contactTitle = t('contactTitle');
const contactSubtitle = t('contactSubtitle');
const contactCtaLabel = t('contactCtaLabel');
const heroPrimaryCta = t('heroPrimaryCta');
const heroSecondaryCta = t('heroSecondaryCta');
const aboutParagraphs = aboutSummary.split('\n\n').filter(Boolean);
const quickFactsTitle = t('quickFactsTitle');
const quickFacts = [
  {
    label: t('quickFact1Label'),
    value: t('quickFact1Value'),
  },
  {
    label: t('quickFact2Label'),
    value: t('quickFact2Value'),
  },
  {
    label: t('quickFact3Label'),
    value: t('quickFact3Value'),
  },
  {
    label: t('quickFact4Label'),
    value: t('quickFact4Value'),
  },
].filter((fact) => fact.label && fact.value);
const writingCtaLabel = t('writingCtaLabel');
---

<section class="pb-16 pt-14 md:pt-16">
  <div class="content-shell space-y-8">
    <div class="space-y-6">
      <span class="inline-flex w-fit items-center rounded-full bg-primary/10 px-4 py-1 text-sm font-medium text-primary">
        {heroLabel}
      </span>
      <h1 class="text-balance text-4xl font-semibold tracking-tight text-foreground sm:text-5xl">
        {heroHeadline}
      </h1>
      <p class="text-lg font-medium text-muted-foreground sm:text-xl">
        {heroSubheadline}
      </p>
      <p class="text-base leading-relaxed text-muted-foreground">
        {heroSupporting}
      </p>
    </div>
    <div class="flex flex-col items-start gap-4 sm:flex-row">
      <a
        href="/blog"
        class={buttonVariants({ variant: 'default', size: 'lg' })}
      >
        <ArrowRight className="mr-2 h-4 w-4" />
        {heroPrimaryCta}
      </a>
      <a
        href="/resume"
        class={buttonVariants({ variant: 'secondary', size: 'lg' })}
      >
        <ArrowRight className="mr-2 h-4 w-4" />
        {heroSecondaryCta}
      </a>
    </div>
  </div>
</section>

<section class="pb-16">
  <div class="content-shell flex flex-col gap-10 md:flex-row">
    <div class="flex-1 space-y-6 md:max-w-3xl">
      <div class="space-y-4">
        <h2 class="text-3xl font-semibold tracking-tight text-foreground sm:text-4xl">
          {aboutTitle}
        </h2>
        {
          aboutParagraphs.map((paragraph) => (
            <p class="text-base leading-relaxed text-muted-foreground">
              {paragraph}
            </p>
          ))
        }
      </div>
    </div>
    {
      quickFacts.length > 0 && (
        <div class="flex w-full max-w-md flex-col gap-4 border-t border-border/40 pt-6 text-sm md:max-w-sm md:border-l md:border-t-0 md:pl-6 md:pt-0">
          <h3 class="text-base font-semibold text-foreground">
            {quickFactsTitle}
          </h3>
          <dl class="space-y-4">
            {
              quickFacts.map((fact) => (
                <div class="space-y-1">
                  <dt class="text-xs font-medium uppercase tracking-[0.18em] text-muted-foreground">
                    {fact.label}
                  </dt>
                  <dd class="text-sm leading-relaxed text-muted-foreground">
                    {fact.value}
                  </dd>
                </div>
              ))
            }
          </dl>
        </div>
      )
    }
  </div>
</section>

<section class="py-12">
  <div class="content-shell">
    <div class="flex flex-col gap-6 md:flex-row md:items-end md:justify-between">
      <div class="max-w-2xl space-y-4">
        <h2 class="text-3xl font-semibold tracking-tight text-foreground sm:text-4xl">
          {writingTitle}
        </h2>
        <p class="text-base leading-relaxed text-muted-foreground">
          {writingSubtitle}
        </p>
      </div>
      <a
        href="/blog"
        class={buttonVariants({ variant: 'outline', size: 'lg' })}
      >
        <BookOpen className="mr-2 h-4 w-4" />
        {writingCtaLabel}
      </a>
    </div>
    {
      writingPreviews.length > 0 ? (
        <div class="mt-8 grid gap-6 md:grid-cols-2 xl:grid-cols-3">
          {
            writingPreviews.map((post) => {
              const postUrl = `/blog/${post.slug}`;
              return (
                <Card key={post.slug} className="h-full border-border/70">
                  {
                    post.heroImage ? (
                      <div class="h-48 w-full overflow-hidden rounded-t-xl">
                        <Image
                          src={post.heroImage}
                          alt={post.heroImageAlt ?? post.title}
                          width={720}
                          height={400}
                          densities={[1, 1.5, 2]}
                          class="h-full w-full object-cover transition-transform duration-300 hover:scale-105"
                        />
                      </div>
                    ) : null
                  }
                  <CardHeader className={post.heroImage ? 'pt-6' : undefined}>
                    <CardTitle className="text-xl font-semibold">
                      {post.title}
                    </CardTitle>
                    <CardDescription className="text-sm text-muted-foreground">
                      {formatDate(post.pubDate, lang)}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    {
                      post.description && (
                        <p class="text-sm text-muted-foreground line-clamp-3">
                          {post.description}
                        </p>
                      )
                    }
                  </CardContent>
                  <CardFooter className="border-t border-border/60 pt-6">
                    <a
                      href={postUrl}
                      class="group inline-flex items-center text-sm font-semibold text-primary"
                    >
                      {writingReadMoreLabel}
                      <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                    </a>
                  </CardFooter>
                </Card>
              );
            })
          }
        </div>
      ) : (
        <div class="mt-8 rounded-2xl border border-dashed border-border/70 bg-muted/20 px-6 py-12 text-center text-muted-foreground">
          {writingEmptyState}
        </div>
      )
    }
  </div>
</section>

<section class="pb-20">
  <div class="content-shell rounded-3xl border border-border/70 bg-primary/10 px-6 py-14 md:px-12">
    <div class="flex flex-col gap-6 md:flex-row md:items-center md:justify-between">
      <div class="max-w-2xl space-y-4">
        <h2 class="text-3xl font-semibold tracking-tight text-foreground sm:text-4xl">
          {contactTitle}
        </h2>
        <p class="text-base leading-relaxed text-foreground/80">
          {contactSubtitle}
        </p>
      </div>
      <div class="flex flex-col gap-4 sm:flex-row">
        <a
          href="https://www.linkedin.com/in/roy-dabire"
          target="_blank"
          rel="noreferrer noopener"
          class={buttonVariants({ variant: 'default', size: 'lg' })}
        >
          <ArrowRight className="mr-2 h-4 w-4" />
          {contactCtaLabel}
        </a>
        <a
          href="mailto:roy.dabire@gmail.com"
          class={buttonVariants({ variant: 'secondary', size: 'lg' })}
        >
          <ArrowRight className="mr-2 h-4 w-4" />
          Email me
        </a>
      </div>
    </div>
  </div>
</section>
